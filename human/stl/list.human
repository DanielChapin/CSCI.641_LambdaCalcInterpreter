module list where

include pair as pair {first, second};
include bool as {true, false, if, not, xor};

def empty = pair::new false id;
def cons = \val.\list. pair::new true (pair::new val list);

def is_empty = \list. not (first list);

def head = \list. first (second list);
def tail = \list. second (second list);

def map = \func.\list. 
  if (is_empty list)
    empty
    (cons
      (func (head list))
      (map func (tail list))
    )
;

def foldr = \func.\init.\list.
  if (is_empty list)
    init
    (func 
      (head list)
      (foldr func init (tail list))
    )
;

def zip = \l1.\l2.
  if (or (is_empty l1) (is_empty l2))
    empty
    (cons
      (pair::new (head l1) (head l2))
      (zip (tail l1) (tail l2))
    )
;

def eq_len = \l1.\l2.
  if (and (is_empty l1) (is_empty l2))
    true
    if (or (is_empty l1) (is_empty l2))
      false
      (eq_len (tail l1) (tail l2))
;

def append = \val.\list.
  if (is_empty list)
    (cons val empty)
    (cons 
      (head list)
      (append val (tail list))
    )
;
